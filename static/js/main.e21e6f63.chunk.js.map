{"version":3,"sources":["Recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","name","inst","img","glass","amounts","ingredients","filteredAmounts","filter","el","filteredIngredients","ingAmount","i","length","x","className","style","Recipe","image","src","alt","title","ing","map","content","App","useState","setRecipe","search","setSearch","query","setQuery","found","setFound","useEffect","getRecipe","a","fetch","response","json","data","drinks","console","log","msg","msg2","onSubmit","e","preventDefault","type","value","onChange","target","key","idDrink","strDrink","strInstructions","strDrinkThumb","strGlass","strIngredient1","strIngredient2","strIngredient3","strIngredient4","strIngredient5","strIngredient6","strIngredient7","strIngredient8","strIngredient9","strIngredient10","strIngredient11","strIngredient12","strIngredient13","strIngredient14","strIngredient15","strMeasure1","strMeasure2","strMeasure3","strMeasure4","strMeasure5","strMeasure6","strMeasure7","strMeasure8","strMeasure9","strMeasure10","strMeasure11","strMeasure12","strMeasure13","strMeasure14","strMeasure15","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e21e6f63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Recipe\":\"Recipe_Recipe__2hB7x\",\"image\":\"Recipe_image__jyznR\",\"title\":\"Recipe_title__2AA-O\",\"ing\":\"Recipe_ing__NeXYM\",\"content\":\"Recipe_content__2dh64\"};","import React from 'react';\r\nimport style from './Recipe.module.css'\r\n\r\nconst recipe = ({ name, inst, img, glass, amounts, ingredients }) => {\r\n\r\n    // Revome null amounts\r\n    var filteredAmounts = amounts.filter(function (el) {\r\n        return el != null;\r\n    });\r\n\r\n    //remove null ingredients\r\n    var filteredIngredients = ingredients.filter(function (el) {\r\n        return el != null;\r\n    });\r\n\r\n    //combine amounts with correct ingredient\r\n    const ingAmount = [];\r\n    for (var i = 0; i < filteredIngredients.length; i++) {\r\n        if (filteredAmounts[i] != null) {\r\n            var x = filteredAmounts[i] + \" - \" + filteredIngredients[i];\r\n        }\r\n        else {\r\n            var x = filteredIngredients[i];\r\n        }\r\n        ingAmount[i] = x;\r\n    }\r\n\r\n    return (\r\n        <div className={style.Recipe}>\r\n            <h1>{name}</h1>\r\n            <img className={style.image} src={img} alt=\"\" />\r\n            <h4 className={style.title}>Ingredients: </h4>\r\n            <ul className={style.ing}>\r\n                {ingAmount.map(ingAmount => (\r\n                    <li>{ingAmount}</li>\r\n                ))}\r\n            </ul>\r\n            <h4 className={style.title}>Directions: </h4>\r\n            <p className={style.content}>{inst}</p>\r\n            <p>Serve in: {glass}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nfunction App() {\n\n  const [recipe, setRecipe] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('margarita');\n  const [found, setFound] = useState(true);\n\n\n  useEffect(() => {\n    getRecipe();\n  }, [query]);\n\n  const getRecipe = async () => {\n    var response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${query}`);\n    var data = await response.json();\n    //check if drink exists\n    if (data.drinks == null) {\n      response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/random.php`);\n      data = await response.json();\n      setFound(false);\n      console.log(data);\n      setRecipe(data.drinks);\n    }\n    else {\n      setFound(true);\n      console.log(data);\n      setRecipe(data.drinks);\n    }\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  if (found == true) {\n    var msg = \"\";\n    var msg2 = \"\";\n  }\n  else {\n    var msg = \"Sorry drink not found.\";\n    var msg2 = \"Try this instead: \";\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Cocktail Search</h1>\n      <form onSubmit={getSearch} className=\"search_form\">\n        <input className=\"search_bar\" type=\"text\"\n          value={search} onChange={updateSearch} />\n        <button\n          className=\"search_button\" type=\"submit\">Search</button>\n      </form>\n      <h2 className=\"error_msg\">{msg}</h2>\n      <h2 className=\"error_msg\">{msg2}</h2>\n      <div className=\"drinks\">\n        {recipe.map(recipe => (\n          <Recipe\n            key={recipe.idDrink}\n            name={recipe.strDrink}\n            inst={recipe.strInstructions}\n            img={recipe.strDrinkThumb}\n            glass={recipe.strGlass}\n\n            ingredients={[recipe.strIngredient1, recipe.strIngredient2, recipe.strIngredient3, recipe.strIngredient4, recipe.strIngredient5,\n            recipe.strIngredient6, recipe.strIngredient7, recipe.strIngredient8, recipe.strIngredient9, recipe.strIngredient10,\n            recipe.strIngredient11, recipe.strIngredient12, recipe.strIngredient13, recipe.strIngredient14, recipe.strIngredient15]}\n\n            amounts={[recipe.strMeasure1, recipe.strMeasure2, recipe.strMeasure3, recipe.strMeasure4, recipe.strMeasure5, recipe.strMeasure6,\n            recipe.strMeasure7, recipe.strMeasure8, recipe.strMeasure9, recipe.strMeasure10, recipe.strMeasure11, recipe.strMeasure12,\n            recipe.strMeasure13, recipe.strMeasure14, recipe.strMeasure15]}\n          />))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}